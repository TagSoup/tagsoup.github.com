<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Text Editors | Phx Tag Soup]]></title>
  <link href="http://TagSoup.github.com/blog/categories/text-editors/atom.xml" rel="self"/>
  <link href="http://TagSoup.github.com/"/>
  <updated>2012-11-30T14:58:31-07:00</updated>
  <id>http://TagSoup.github.com/</id>
  <author>
    <name><![CDATA[Phx Tag Soup]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs and I are BFF's]]></title>
    <link href="http://TagSoup.github.com/blog/2012/03/05/emacs-and-i-are-bffs/"/>
    <updated>2012-03-05T08:45:00-07:00</updated>
    <id>http://TagSoup.github.com/blog/2012/03/05/emacs-and-i-are-bffs</id>
    <content type="html"><![CDATA[<h3>Day 11 of the 30 Day Writing Challenge: A look at why I use 35 year old software</h3>

<h2>Why Emacs?</h2>

<p>Let me just start off by saying that this is by no means an intent to disuade you from using your editor of choice. That being said, stop using your bloated GUI IDEs. Okay, maybe that was a bit harsh, but do you remember when your teachers in school would say, "keep it simple?" It's true and I'm sure if you are slightly familiar with Emacs you are saying to yourself, "but emacs isn't simple, I couldn't even figure out how to get out of the program!"</p>

<p><em>Note</em> If you are on linux or Mac you should know these commands:</p>

<pre><code>vi: Save [ESC] w [Enter]
    Quit [Esc] q [Enter]

emacs: Save [CTRL]-x s
       Quit [CTRL]-x c
</code></pre>

<p>I will fully admit there is a learning curve to Emacs, it's the biggest draw back of any of the terminal editors. When I first started using Emacs it took me around 2 months to be able to use it exclusively. Up until that point I was augmenting my development with the GUI editor I was using prior. My point though is, stick with it, make a cheat sheet, keep a page open of common commands, so on and so on. Your hard work will be rewarded with efficient, clean and simple development.</p>

<!--more-->


<h2>Keep Your Hands on those Keys!</h2>

<p>Over the years I've come to know how critical it is to get an idea out when it's flowing. While working at a data entry job I picked up a skill that has helped me emmensly, even if you don't use Emacs. To flow faster, try and keep your hand off the mouse. Every transition slows you down and impedes your train of thought into the code. The best part about this is you can pracitce this with whatever editor you're already doing. Emacs, though allows you to maximize on keyboard use.</p>

<p>One of the biggest culprets of mouse use is text selection, Emacs has a way to do all of that with just the keyboard.</p>

<pre><code>Key Commands:
Yank a line                        [CTRL]-k
Place a yanked line                [CTRL]-y
Select the entire document         [CTRL]-x h
Drop a Mark                        [CTRL]-[SPACE]
</code></pre>

<p>Yanking is the equivalent of copy, it just doesn't end up in your clipboard. You can integrated droping a mark anywhere in the document and moving the cursor to where you'd like to yank and it will grab everything between the dropped mark and your cursor.</p>

<p>Emacs has a concept of yanked lines so you actually have a log of what has been yanked, but I won't get in to that here. Moving right along...</p>

<h2>Switching Windows Often?</h2>

<p>I know when I'm doing setup for a new project I'll use the command line to create folders and structures on the file system. There are times though after setup and I'm working on a JavaScript file and realize I'm missing a folder I need. Emacs has a plethora of built in commands (over 2000 in fact) to do any number of things. For this instance it can make directories for you.</p>

<pre><code>How to Create a Directory
M-x "make-directory" RET
Type the path in the input and hit return
</code></pre>

<p><em>(M is reference for the Meta key, on OSX the meta key is Esc)</em></p>

<p>It's that simple and flows directy inline with your working environment.</p>

<h2>Can I get that Code Snippet in Perwinkle Blue?</h2>

<p>Emacs is a LISP editor, it runs and interprets LISP to make it the powerhouse that it is today. What does that mean? Well, LISP is a functional language that was designed originally for processing lists. (LISt Processing). <a href="http://en.wikipedia.org/wiki/Lisp_%28programming_language%29">Wikipedia</a></p>

<p>Lisp provides Emacs it's power because it allows you to specify any new functionality you'd like your editor to have. Emacs has a concept of Major and Minor modes which are all just small Lisp programs. I'll give you an example of the features that can be provided.</p>

<ul>
<li>Colored syntax highlighting</li>
<li>Smart code indentation</li>
<li>Tag dictionaries</li>
<li>Syntax error highlighting</li>
<li>Etc.</li>
</ul>


<p>One of my favorite major modes is <a href="http://code.google.com/p/js2-mode/">JS2 Mode</a> by Steve Yegge. JS2 Mode makes editing JavaScript a dream. I won't go into specifics here, just take a look at the Google Code site and read for yourself on it's capabilities. One of the biggest things it has going for it is the error highlighting, which I will be talking about next.</p>

<h2>Error! You have Code Syntax Problems!</h2>

<p>One of the banes of most JavaScript developers is the leniency of browsers fixing broken syntax in files. When you have lagging commas or missing semi-colons you have ticking time-bombs in your code. If you were looking for these areas by hand it would take a life time. Yegge's JS2 Mode has built in error finding and will show you live, while you are coding.</p>

<pre><code>Usage
Skip to next error [CTRL]-x `
</code></pre>

<p>That command will jump you to the next error in the document and  show you a short message of what is wrong. For me, this single bit of functionality has saved me a number of hours of hunting down that elussive missing comma.</p>

<h2>I Don't Know Where to Start.</h2>

<p>Now, I don't want to leave you hanging, so I'll point you to <a href="https://github.com/ncrohn/emacs">my emacs github repo</a> where you can get my setup. This will give you a jump start on coding with Emacs. If you do start using Emacs, start making your own profiles and customize Emacs to just how you want it. Customization is the single most reason I'd recommend Emacs.</p>

<pre><code>Installation
cd to the github clone
cp .emacs ~/.
cp -r vendor ~/.emacs.d/.
</code></pre>

<p>Once you are done there, go to terminal and try editing a JavaScript file.</p>

<p>One other note, to take advantage of colored syntax you'll need to make sure your terminal has colors enabled. To do that simply add the lines below to your bash profile.</p>

<pre><code>export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
</code></pre>

<h2>An Honest Assessment</h2>

<p>This post was not intended to convert, but more aptly stated as a viewport in to how I develop and why I love it. Many of the GUI editors on the market today have a lot of functionality and are very beautifuly done. I have only shown you a small glimpse of what Emacs can do, so I encourage you to go out and see for yourself the power that lies in Emacs and lisp. I leave you with a very apropos XKCD comic on the subject. <a href="http://xkcd.com/378/">Real Programmers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Textmate vs Sublime 2]]></title>
    <link href="http://TagSoup.github.com/blog/2012/03/04/textmate-vs-sublime-2/"/>
    <updated>2012-03-04T21:03:00-07:00</updated>
    <id>http://TagSoup.github.com/blog/2012/03/04/textmate-vs-sublime-2</id>
    <content type="html"><![CDATA[<h3>Day 10 of the 30 Day Writing Challenge</h3>

<p>I love, and I mean LOVE TextMate. It was my baby up until this year. TextMate did some amazing things, but their lack of updates started to wear on me. I had seen a few friends starting to use Sublime Text 2 and, at first, totally ignored their praise of the product. I thought, there's NOTHING Sublime is doing that TextMate (TM) isn't. So, it took about a month from the time I saw Sublime, to the time I gave it a try. I wish I would have done it earlier. I've seen the screen shots of TM2 and can't form a REAL opinion of it without using it. So the cries of "TextMate 2 is going to be better" mean nothing to me right now. I have gone through, and compared the tool based on what I am doing day to day. I'm purely a front-ender. And my day to day, may be completely different than yours. Just roll with it.</p>

<!--more-->


<h4>Works on all platforms</h4>

<p>TextMate: OSX Only<br />
Sublime: OSX, Linux, Windows<br /></p>

<p>Clear choice there. Your whole team can be using the same editor, no matter which platform they're on. Zesty.</p>

<h4>Selecting Lines of Code</h4>

<p>TextMate: <code>cmd-shift-L</code><br />
Sublime: <code>cmd-L</code><br /></p>

<p>I don't think I need to explain what this keystroke is doing. The reason TM needs the <code>shift</code> modifier is because cmd-L performs a "Go to line #" command. 'nuff said</p>

<h4>Moving lines of code up and down</h4>

<p>Sublime and TextMate: <code>cmd+ctrl</code> up and down arrows</p>

<p>There are some subtle differences in the two though, so read on.</p>

<p>TextMate: When you have an entire line selected (cmd-L), it will move the line up or down one line at a time. You can continue to move the selected line up or down multiple lines by repeating the command. BUT, if you have your cursor on the line of code, but it's not selected the line of code moves and the cursor stays put. So if you perform the keystroke again, you will be moving a different line of code. The rule is: the line the cursor is sitting at is the line that will be moved.</p>

<p>Sublime: Performs the same when the entire line is selected and when the cursor is on a line of code. When the keystroke is performed, the lines moves in accordance to the arrow key pressed, but the cursor also move with that line. So even if you don't have the entire line selected, you can perform the keystroke repeatedly and move the same line up or down your code.</p>

<h4>Wrapping the guts</h4>

<p>TextMate: <code>cmd-shift-w</code><br />
Sublime: <code>cmd-shift-w</code><br /></p>

<p>Both applications do the same thing. It starts an html tag by both opening and closing the tag. Both default to the following:
```</p>

<p></p>


<p><code>``
The nice part is the cursor is placed in the first opening tag, with the 'p' highlighted. So if you want to change the</code><p><code>to a</code><div>` just type away.</p>

<h4>Wrap multiple lines:</h4>

<p>TextMate: <code>cmd-ctrl-w</code><br />
Sublime: Can no findz<br /></p>

<p>TextMate: This is a handy shortcut for ul, ol, dl, and omgl too. Here's how it goes down, stick with me. You start from the inside out. So think, the text of each list item. Like so:
<code>
OMG
This is
a mutha
effing list
</code>
Use select each of those lines, in TextMate I put the cursor on the first line and <code>cmd-shift-L</code> to select the line. Then hold <code>shift</code> and the down arrow to select the lines under the first. With me? Then I use the <code>cmd-ctrl-w</code> to wrap each line individually. I change the default <code>&lt;p&gt;</code> to <code>&lt;a&gt;</code> which makes:
<code>html
&lt;a href=""&gt;OMG&lt;/a&gt;
&lt;a href=""&gt;This is&lt;/a&gt;
&lt;a href=""&gt;a mutha&lt;/a&gt;
&lt;a href=""&gt;effing list&lt;/a&gt;
</code>
Sweet, so now I have a bunch of links, perhaps a nav or some sort. Now, I select all of the lines again, and perform the same keystroke which gives us:
<code>html
&lt;li&gt;&lt;a href=""&gt;OMG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;This is&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;a mutha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;effing list&lt;/a&gt;&lt;/li&gt;
</code>
Then I select all of those lines again, and use <code>ctrl-shift-w</code> to wrap the list items in an <code>&lt;ul&gt;</code>. HAWT
```html</p>

<ul>
    <li><a href="">OMG</a></li>
    <li><a href="">This is</a></li>
    <li><a href="">a mutha</a></li>
    <li><a href="">effing list</a></li>
</ul>


<p>```</p>

<h4>Multiple Cursors</h4>

<p>TextMate: meh, kinda... <code>cmd-opt-a</code><br />
Sublime: <code>cmd-left click</code><br /></p>

<p>TextMate: Let's take the above example, the unordered list. You can select all of the <code>&lt;li&gt;</code> tags and press <code>cmd-opt-a</code> which will place a cursor on each line (invisible). It might not seem different from the column selecting but here's how it is. On lines of various lengths, the characters won't match up correctly. So what this command does, is place the cursor at the end of the line, and allows you to be X amount of characters from the end. So in the above example, I use my keystroke and press the <code>left arrows</code> 5 times and my cursor will be before each of the <code>&lt;/li&gt;</code> tags. The nice thing is, it doesn't matter how long each line is. The drawback? The feature only works on line in succession. You can't skip lines because there's no Multi Select in TM</p>

<p>Sublime: Just <code>cmd-left click</code> anywhere you want. Yum</p>

<h4>Switching File Types</h4>

<p>TextMate: <code>ctrl-opt-cmd-"modyifier"</code><br />
Sublime2: Thanks filosofunk! (see below)<br /></p>

<p>TextMate: When you create a new file, by default, the new file type is a plain text document. You can use <code>ctrl-opt-cmd-h</code> to change it to html, giving  you html syntax highlighing. Or <code>ctrl-opt-cmd-j</code> which will prompt you with a choice, Java or JavaScript. That one's easy, JS! A handy short cut for sure. Wish Sublime had this.<br />
Sublime: Ctrl-Shift-P: Opens Command Palette<br />
S: the first letter of 'Set Syntax'<br />
Click on what you want or just keep typing until you get to the file type you want and hit enter.<br /></p>

<h4>Bundles</h4>

<p>TextMate: Yups<br />
Sublime: Yups<br /></p>

<p>Even better, Sublime can use most TextMate bundles. DO IT!</p>

<h4>Multi-Select</h4>

<p>TextMate: No haz :(<br />
Sublime: <code>cmd</code> and select text<br /></p>

<p>Mmmmm, so delicious. So you can select multiple strings, tags, etc, from ANYWHERE in the document. Not just columns. Plese see this quick, <a href="http://tagsoup.github.com/blog/2011/12/08/Sublime-2/">blurry demo</a>.</p>

<h4>Package Control</h4>

<p>TextMate: No haz :(<br />
Sublime: <code>cmd-shift-p</code><br /></p>

<p>Add new plugins with a few keystrokes. Type that short command, then in the prompt begin typing "Package" and look for "Package Control- Install Package". Take a look at what' available.</p>

<h4>Jump to line number</h4>

<p>TextMate: <code>cmd-L</code><br />
Sublime: <code>cmd-g</code><br /></p>

<p>Um, so if I need to explain this, then I've wasted all my time writing this tonight. Frownies.</p>

<h4>Multi-col selecting</h4>

<p>TextMate: <code>alt-drag</code> (or however you wish to select)<br />
Sublime: <code>alt-drag</code> (or however you wish to select)<br /></p>

<p>This allows you to select multiple lines of text, and multiple colums on each line.</p>

<h4>Tabbing multiple lines</h4>

<p>TextMate: <code>cmd-[</code><br />
Sublime: <code>tab</code><br /></p>

<p>Again, I'm hoping you know what this does.</p>

<h4>JS Obj-like preferences</h4>

<p>TextMate: Naws<br />
Sublime: Has<br /></p>

<p>TextMate allows for a good amount of customization in various menus etc. Sublime does it a bit different. Here' take a look for youself:
```javascript
{</p>

<pre><code>"color_scheme": "Packages/User/Monokai Soda.tmTheme",
"detect_indentation": true,
"draw_minimap_border": true,
"find_selected_text": true,
"font_size": 12.0,
"highlight_active_indent_guide": true,
"highlight_line": true,
"indent_subsequent_lines": true,
"tab_completion": true,
"theme": "Soda Dark.sublime-theme",
"trim_trailing_white_space_on_save": false
</code></pre>

<p>}
```
This makes it VERY easy to change computers without losing your customizations. Upload this to a gist, and you're set.</p>

<h4>Tab Completion</h4>

<p>TextMate: naws<br />
Sublime: Yups<br /></p>

<p>Sublime offers tab completion for multiple languages. And it's damn good.</p>

<h4>UI</h4>

<p>TextMate: Loses, needs 3rd party stuffs to compete<br />
Sublime: Winsies<br /></p>

<p>I know text editors are like religions. So I am scared to get TOO deep into the discussion of why Sublime has a nicer UI.</p>

<ul>
    <li>The zoomed-out look of the document on the right hand side is a win with Sublime.</li>
    <li>The default drawers (think furniture not art). Clicking on a file in the drawer doesn't open it, but gives you a look at what's in the file. As soon as you start editing, it snaps open. I remember sometimes having shit-tons of documents open in TextMate because I was clicking on files trying to find something specific (yes, I know about find).
    </li>
    <li>Distraction Free Mode!!!!</li>
</ul>


<h4>TL:DR;</h4>

<p>Trust me when I say, making the switch was a hard sell. In fact, I left my TextMate icon in my dock for 3 months after making the switch. I was sure there was going to be something in Sublime that was going to piss me off. I'm still using Sublime and I'm not looking back. Even when/if TextMate 2 ever releases.</p>

<h4>Useful Links Getting Started with Sublime 2</h4>

<p><a href="http://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-tips-and-tricks/">NetTuts Getting Started</a><br />
<a href="http://o2js.com/2011/10/29/fell-in-love-with-sublime-text-2/">o2js Getting Started</a><br />
<a href="http://1p1e1.tumblr.com/post/14262857223/9-reasons-you-must-install-sublime-text-2-code-like-a">9 Reasons You Must Install Sublime</a><br />
<a href="http://wbond.net/sublime_packages/package_control">More on Package Control</a><br />
<a href="https://github.com/n00ge/sublime-text-haml-sass">Some Extra Syntax Highlighting</a><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Editor, Y U Do That - Sublime 2, Whitespace and Git conflicts]]></title>
    <link href="http://TagSoup.github.com/blog/2011/12/08/Sublime-2/"/>
    <updated>2011-12-08T23:58:00-07:00</updated>
    <id>http://TagSoup.github.com/blog/2011/12/08/Sublime-2</id>
    <content type="html"><![CDATA[<p>I recently changed text editors. For any dev, this is a big deal. We're talking changing religions big. I had been using TextMate for about 4 years. I love TextMate. Then, I started hearing more and more about Sublime 2. So I decided to give it a whirl. And, after 10 days, I'm hooked. Thanks Ryan Mathis!</p>

<p>I wanted to point out a small feature/issue I ran into today. Sublime 2 has a config that will trim white space at the end of lines. It's really useful and in most cases a great feature.</p>

<p>Here's where I ran into the snag. I made a couple of VERY minor changes to a file. Saved, then ran git add, git commit etc. Another developer takes a look at what I pushed and tells me there conflicts all over the file. I only changed 2 lines of code, how can there be conflicts "all over the place".</p>

<p>Here's a quick example of the feature in action. On the left, I have Sublime 2 open. On the right, I have the same file open in TextMate. When I click save in Sublime 2, you will see the white space disappear.</p>

<iframe width="960" height="720" src="http://www.youtube.com/embed/tVBVkewGpU0?hd=1" frameborder="0" allowfullscreen></iframe>


<p>This was causing the conflicts in git. It took me a while to figure this out. I knew it was the editor, but not sure where it was happening. Once I figured it out, I needed to turn it off for this specific project :(</p>

<p>I found this setting:
<code>
"trim_trailing_white_space_on_save": true,
</code>
in the Base.File.sublime-settings (Default) and Base.File.sublime-settings (User). You can access these files by going to Sublime Text 2 > Preferences > File Settings Default and File Settings - User. I changed the setting to 'false' in both files and that did the trick.</p>

<p>Features like Trimming Trailing White Space are really nice. And 99% of the time should be turned on. But it's important to understand all the magic your editor is doing for you. Next time you hit that edge case and have to disable a feature, you won't have to waste time troubleshooting.</p>
]]></content>
  </entry>
  
</feed>
