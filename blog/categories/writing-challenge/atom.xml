<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Writing Challenge | Phx Tag Soup]]></title>
  <link href="http://TagSoup.github.com/blog/categories/writing-challenge/atom.xml" rel="self"/>
  <link href="http://TagSoup.github.com/"/>
  <updated>2012-10-09T17:04:01-07:00</updated>
  <id>http://TagSoup.github.com/</id>
  <author>
    <name><![CDATA[Phx Tag Soup]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Bit on Process]]></title>
    <link href="http://TagSoup.github.com/blog/2012/03/13/a-bit-on-process/"/>
    <updated>2012-03-13T08:31:00-07:00</updated>
    <id>http://TagSoup.github.com/blog/2012/03/13/a-bit-on-process</id>
    <content type="html"><![CDATA[<h3>Day 19 of the 30 Day Writing Challenge</h3>

<p>I can't think of anything more uniformly despised by everyone in my career than process.  Just mentioning the word generally causes a visible reaction.  That isn't a good thing.  A good process should be your best friend that makes everything else in your life easier.  I know why everyone reacts that way.  We've all worked somewhere with a rigid process whose endless meetings and documents detract more than they add.  That doesn’t mean process itself is bad, just that those processes are.</p>

<p>A process doesn’t have to be rigid.  It doesn’t even have to cover development lifecycle if you don’t want it to. If you notice a recurring problem, implement a rule to solve it.  Say, for example, you are regularly deploying sites and the links don’t function properly.   This is clearly a problem, and bad for you.  Now we identify what caused that problem.  In this example it was the page was never tested in IE7, and some of the fancy modern code doesn’t work there.  How was that missed?  We never identified what browsers the client expected the site to function properly in.  So we now have the rule,  “Identify all required support configurations from client prior to the start of development.” Congratulations, you have a process.  It’s that simple.  There is no one process that will solve every organization’s problems.   Every company is going to have to tailor their own process.
 <!-- more -->
The assumption that adopting a predefined process will work is a common mistake.  It’s an understandable one to make too.  The entire idea of process is that it should make your life easier.  What is easier than following a define set of steps?  However, just like you can’t copy and paste the same code from one project to the next, you can’t just copy someone’s process.  Their needs aren’t your needs.  So identify those needs.  Does management want greater visibility?  Are project managers asking you to add, “just one small thing,” to the sprint?  Our job as developers is to solve problems.  There is no reason we can’t solve our own.</p>

<p>Before I end this, I will admit I’m biased towards process.  I’m a QA, without process my life is very hectic.  QA thrives in controlled environments.  If I’m given reliable inputs (Requirements Docs, Support Configurations, User Stories, etc.), I can’t guarantee the outputs of my testing.  I can assure you, without process requirements that those things exist, they won’t.  This leads incomplete testing, and thus quality problems.  No one likes those.   So help us help you better, create a process</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacking on the NCAA Tournament for Fun (Not For Profit)]]></title>
    <link href="http://TagSoup.github.com/blog/2012/03/12/hacking-on-the-ncaa-tournament-for-fun-not-for-profit/"/>
    <updated>2012-03-12T23:59:00-07:00</updated>
    <id>http://TagSoup.github.com/blog/2012/03/12/hacking-on-the-ncaa-tournament-for-fun-not-for-profit</id>
    <content type="html"><![CDATA[<h3>Day 18 of the 30 Day Writing Challenge!</h3>

<p>Hey everyone, it's me again. I'm sober this time, don't worry. Well actually I'm drunk on a crazy idea that I had last weekend. I've always been <em>really</em> into the NCAA Tournament. I once took up an entire wall in my kitchen with a giant bracket just so I could fill it in after every game. So rolling around in my head last weekend was an idea of combining the NCAA Tournament with my other love, code. I started to play around with a format to see how small (in terms of character length) I could make all my picks. This is what I came up with.</p>

<!--more-->


<h3>How To Get This Up and Running</h3>

<ol>
<li>Install <a href="http://nodejs.org/"><code>node</code></a></li>
<li>Install <a href="http://npmjs.org/"><code>npm</code></a></li>
<li><code>git clone git@gist.github.com:2028007.git gist-2028007</code></li>
<li><code>cd gist-2028007</code></li>
<li><code>npm install</code></li>
<li><code>node app.js S18541137214112424W185463721532533E191213113102112111011111MW1854113728432828FFWMWW</code></li>
</ol>


<h3>Explanation</h3>

<p>The argument passed to <code>app.js</code> is a string containing picks for the 63 games in the NCAA Tournament (after the play-in games). The example above can be looked at as divided into five parts:</p>

<p><code>S18541137214112424</code> <code>W185463721532533</code> <code>E191213113102112111011111</code> <code>MW1854113728432828</code> <code>FFWMWW</code></p>

<h3>Identifiers</h3>

<p>Each of the first four parts are a region and the picks for that region. The last part is the picks for the Final Four. The Final Four identifier (<code>FF</code>) and picks must come at the end of the string. The alpha characters that start each part are the identifier for that region. The region identifier must be a key in a valid region key (by valid I mean it must exist in the data file).</p>

<h3>Picks</h3>

<p>The numbers for the first four regions correspond to the picks being made for that region. Each number refers to a seed that you think will win their game. The picks must be made in a top-down, left-right order when viewing the games on a bracket. This means for the first round, the games must be picked in the order: <code>1 v 16, 8 v 9, 5 v 12, 4 v 13, 6 v 11, 3 v 14, 7 v 10, 2 v 15</code>. So if you wanted to pick all the higher seeded teams for the first round, your numbers would be <code>18546372</code>. To complete a region, keep picking winning seeds in this order. To finish our previous example of all the higher seeded teams winning, our numbers would be <code>185463721432121</code>. This might be easier to visualize if we look at the picks divided into rounds: <code>18546372</code> (first round winners) <code>2143</code> (second round winners) <code>12</code> (Sweet Sixteen winners) <code>1</code> (Elite Eight winner). Pair that with the identifier for the region and you have <code>E185463721432121</code> which is a valid region.</p>

<h3>Final Four</h3>

<p>Once we have put our four regions together we can add the Final Four. For the Final Four 'region', you will pick the winners not be their seed but by the identifier of the region that they originally came out of. Make sure you know which regions are playing each other as well. In the example of the 2012 NCAA tournament, the Final Four was <code>S v W and E v SW</code>. So appropriate Final Four picks would be <code>WMWW</code> since we are first picking the winners of the two Final Four matchups and the picking the winner of the final game. Pair that with the Final Four identifier to get <code>FFWSEW</code>.</p>

<h3>Output</h3>

<p>If your picks are valid, the output should display in an object contain all the regions, rounds and games.</p>

<p>If there are any errors, those will be displayed instead.</p>

<h3>Why?</h3>

<p>I wanted a codified format to fit all my picks for the NCAA Tournament into as little characters as possible. I believe that even if all region identifiers were two characters and you picked the higher seed in every game, you could fit your picks in 132 characters (enough to fit in a tweet!). Obviously this could be shortened further by adding additional conventions (such as region order, etc.) but I believe this to be a good mix of brevity and flexibility.</p>

<p>This logic is the basis of <a href="http://tweetyourbracket.com">TweetYourBracket.com</a> (<a href="https://github.com/lukekarrys/tweetyourbracket.com">GitHub repo</a>). The idea is that there will be a Twitter watcher which will watch for a specific hashtag and then the bracket will be parsed from the tweet and saved.</p>

<h3>Not But Seriously, Why?</h3>

<p>Because it was fun. Not let's show off a few code samples to prove my point.</p>

<p><em>Note: all the code here is pulled from <a href="https://github.com/lukekarrys/tweetyourbracket.com">the TweetYourBracket GitHub repo</a> and slightly modified for example purposes. I also made the <a href="https://gist.github.com/2028007">gist</a> I referenced above as an easier way to play with the majority of the code.</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>picksToArray.js</span><a href='https://github.com/lukekarrys/tweetyourbracket.com/blob/master/lib/plugins/validator.js#L23'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Takes a string of the picks for a region and validates them</span>
</span><span class='line'><span class="c1">// Return an array of picks if valid or false if invalid</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">picksToArray</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">picks</span><span class="p">,</span> <span class="nx">regionName</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">regexp</span><span class="p">,</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="nx">replacement</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">regExpStr</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">seeds</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">seedLength</span> <span class="o">=</span> <span class="nx">seeds</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">regExpJoiner</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;(&#39;</span> <span class="o">+</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;|X)&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">backref</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">regExpJoiner</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">&quot;\\&quot;</span><span class="o">+</span><span class="nx">n</span><span class="p">;</span> <span class="p">}));</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Create capture groups for the first round matchups of the region</span>
</span><span class='line'>  <span class="c1">// Since we know what order the games should be selected in we can build a regex</span>
</span><span class='line'>  <span class="c1">// by splitting the seeds array into groups of two</span>
</span><span class='line'>  <span class="c1">// The regex will look like this:</span>
</span><span class='line'>  <span class="c1">// (1|16|X)(8|9|X)(5|12|X)(4|13|X)(6|11|X)(3|14|X)(7|10|X)(2|15|X)</span>
</span><span class='line'>  <span class="c1">// The X is the character used for a game that hasnt been picked yet</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">seedLength</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">regExpStr</span> <span class="o">+=</span> <span class="nx">regExpJoiner</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">seeds</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Create capture groups using back references for the capture groups above</span>
</span><span class='line'>  <span class="c1">// Since we just created 8 capture groups above and we know that during each subsequent round</span>
</span><span class='line'>  <span class="c1">// the number of teams will be cut in half, we can use another loop to add to the regex.</span>
</span><span class='line'>  <span class="c1">// We will use glorious back references to ensure that each later match only contains</span>
</span><span class='line'>  <span class="c1">// teams that would have had the possibility of advancing to that game.</span>
</span><span class='line'>  <span class="c1">// We will add this to our regex above:</span>
</span><span class='line'>  <span class="c1">// (\1|\2|X)(\3|\4|X)(\5|\6|X)(\7|\8|X)(\9|\10|X)(\11|\12|X)(\13|\14|X)</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">seedLength</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">regExpStr</span> <span class="o">+=</span> <span class="nx">backref</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">regexp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">regExpStr</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">replacement</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/em&gt;.range(1, seedLength), function(num) { return &#39;$&#39;+num; }).join();&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// Here we will test if our picks match the regex and if they do</span>
</span><span class='line'>  <span class="c1">// we will use the 15 capture groups we created above to split</span>
</span><span class='line'>  <span class="c1">// the picks into an array</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">regexp</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">picks</span><span class="p">))</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">picks</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">regexp</span><span class="p">,</span> <span class="nx">replacement</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">logError</span><span class="p">(</span><span class="nx">regionName</span><span class="p">,</span> <span class="s1">&#39;was unable to parse the picks&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I had fun writing to the code above. The purpose of is to take a string of picks and validate them with a regex to ensure that they meet the necessary requirements. It gets a little inception-y as you are looping through and created capture groups in the regex that are using back references to capture groups you just created in the iteration before.</p>

<h3>Now For the Client Side</h3>

<p>The code above is all used on the server-side in my application. I tried to leave as much up to server as I could, because I already had the code there and didn't want to deal with bugs bringing it to the browser. So what I did on my <a href="http://tweetyourbracket.com">client-side bracket</a> was to save the status of each pick into the URL hash. That way, the entire state of the bracket is in the URL at all times. It's not perfect, because I didn't add a watcher for the hash that will change picks if you change the URL. But what it does, is if you load the page with a bracket in the url hash, it will send that hash to the server and return the HTML if the bracket was valid.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bracket.js</span><a href='https://github.com/lukekarrys/tweetyourbracket.com/blob/master/public/js/bracket.js#L103'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">stringBuilder</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// I&#39;m going through each region&#39;s pickable games</span>
</span><span class='line'>  <span class="c1">// and taking either the team&#39;s region (for the Final Four)</span>
</span><span class='line'>  <span class="c1">// or the team&#39;s seed (if it&#39;s a regular region)</span>
</span><span class='line'>  <span class="c1">// and in the end saving the string to window.location.hash</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.region&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">$reg</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">regId</span> <span class="o">=</span> <span class="nx">$reg</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;_region&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">str</span> <span class="o">+=</span> <span class="nx">regId</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.winners &#39;</span><span class="o">+</span><span class="nx">pickable</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$this</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">text</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">$this</span><span class="p">.</span><span class="nx">text</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">text</span> <span class="o">=</span> <span class="p">(</span><span class="nx">regId</span> <span class="o">===</span> <span class="s1">&#39;FF&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">$this</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;fromRegion&#39;</span><span class="p">)</span> <span class="o">:</span> <span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/[0-9]+/</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;X&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">str</span> <span class="o">+=</span> <span class="nx">text</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span> <span class="o">=</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// This is called on dom ready</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// I have server side routes set up with flatiron to render this with handlebars</span>
</span><span class='line'><span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/validate/&#39;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'><span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$content</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;#bracket_holder&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Rendering It All</h3>

<p>The last thing I'm going to show you is the server-side JavaScript function that adds the necessary content to our tournament object and the Handlebars template that renders it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>addTeamContent.js</span><a href='https://github.com/lukekarrys/tweetyourbracket.com/blob/master/lib/plugins/validator.js#L23'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Take validated tournament and add necessary content so it is ready for Handlebars</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">addTeamContent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">validatedPicks</span><span class="p">,</span> <span class="nx">editable</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// These are the master regions</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ncaaRegions</span> <span class="o">=</span> <span class="nx">NCAA</span><span class="p">.</span><span class="nx">regions</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">validatedPicks</span><span class="p">.</span><span class="nx">regions</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">region</span><span class="p">,</span> <span class="nx">regionIndex</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// These are the teams that played in this region</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">regionTeams</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">ncaaRegions</span><span class="p">[</span><span class="nx">region</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">ncaaRegions</span><span class="p">[</span><span class="nx">region</span><span class="p">.</span><span class="nx">id</span><span class="p">].</span><span class="nx">teams</span> <span class="o">:</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">region</span><span class="p">.</span><span class="nx">rounds</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">round</span><span class="p">,</span> <span class="nx">roundIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Triple nested loops FTW! ;)</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">round</span><span class="p">.</span><span class="nx">games</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">game</span><span class="p">,</span> <span class="nx">gameIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">round</span><span class="p">.</span><span class="nx">teams</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="nx">round</span><span class="p">.</span><span class="nx">teams</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">team</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">seed</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">isTop</span> <span class="o">=</span> <span class="p">(</span><span class="nx">gameIndex</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">lastRound</span> <span class="o">=</span> <span class="p">(</span><span class="nx">roundIndex</span> <span class="o">===</span> <span class="nx">region</span><span class="p">.</span><span class="nx">rounds</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">classes</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;top&#39;</span><span class="p">,</span> <span class="s1">&#39;bottom&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">region</span><span class="p">.</span><span class="nx">id</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">finalFourRegionName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">team</span><span class="p">.</span><span class="nx">seed</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">game</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">team</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">regionTeams</span><span class="p">[</span><span class="nx">team</span><span class="p">.</span><span class="nx">seed</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="nx">team</span><span class="p">.</span><span class="nx">fromRegion</span> <span class="o">=</span> <span class="nx">region</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// These are selected winners in the final four</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">fromRegion</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">validatedPicks</span><span class="p">.</span><span class="nx">regions</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">reg</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">reg</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">game</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">fromRegion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">finalFourTeam</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">first</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">last</span><span class="p">(</span><span class="nx">fromRegion</span><span class="p">.</span><span class="nx">rounds</span><span class="p">).</span><span class="nx">teams</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">team</span><span class="p">.</span><span class="nx">seed</span> <span class="o">=</span> <span class="nx">finalFourTeam</span><span class="p">.</span><span class="nx">seed</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">team</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">finalFourTeam</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">team</span><span class="p">.</span><span class="nx">fromRegion</span> <span class="o">=</span> <span class="nx">game</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">round</span><span class="p">.</span><span class="nx">teams</span><span class="p">[</span><span class="nx">gameIndex</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">team</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">editable</span><span class="o">:</span> <span class="nx">editable</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">startMatchup</span><span class="o">:</span> <span class="nx">isTop</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">endMatchup</span><span class="o">:</span> <span class="o">!</span><span class="nx">isTop</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">classes</span><span class="o">:</span> <span class="p">(</span><span class="nx">lastRound</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="o">:</span> <span class="nx">classes</span><span class="p">[</span><span class="o">~~!</span><span class="nx">isTop</span><span class="p">]</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span> <span class="k">this</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="nx">validatedPicks</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Check out the <a href="https://github.com/lukekarrys/tweetyourbracket.com/blob/master/templates/bracket.hbs">Handlebars template</a> on GitHub to see how this was all rendered. Unfortunately I couldn't figure out how to embed Handlebars code with Octopress.</p>

<h2>In The End</h2>

<p>I had a small dream of making this a production ready app in time for Selection Sunday (which was last Sunday). Obviously that didn't work out but  <a href="http://tweetyourbracket.com">TweetYourBracket.com</a> was an extremely fun exercise even if it didn't get anywhere close to ready for prime time use. Some things I wanted to do with it:</p>

<ul>
<li>Make it not look like crap (using Bootstrap)</li>
<li>Add some cooler interactions during the bracket (drag 'n' drop, keyboard shortcuts, auto scrolling)</li>
<li>Mobile ready with some media queries</li>
<li>Make the Postgres DB not break when a row doesn't exist (sounds easy, so no idea why I couldn't get it to work)</li>
<li>Better hosting (for now it's on a free Heroku instance)</li>
<li>Make it actually do what was advertised and setup the Twitter Streaming API watcher</li>
</ul>


<p>I encourage anyone who is interested in this to take a look at the <a href="https://github.com/lukekarrys/tweetyourbracket.com">GitHub repo</a>. I just opened it up today and would never refuse a cool pull request or issue. Hopefully it will be ready by next year :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wear More Hats]]></title>
    <link href="http://TagSoup.github.com/blog/2012/03/11/wear-more-hats/"/>
    <updated>2012-03-11T21:34:00-07:00</updated>
    <id>http://TagSoup.github.com/blog/2012/03/11/wear-more-hats</id>
    <content type="html"><![CDATA[<h3>Day 17 of the 30 Day Writing Challenge</h3>

<p>Developers of all types know that they have responsibilities: to clients, to employers, to code standards, and so on. We'd be doing ourselves a disservice, however, if we didn't acknowledge our responsibility to grow into not-typically-dev roles. It goes without saying that if you fall too far in love with a particular language and don't learn alternatives/future-friendly sibling languages, you'll become as certainly obsolete as your beloved language one day will.</p>

<p>This isn't about learning new languages - this is about learning new disciplines. And wearing more hats.</p>

<h3>Lots of hats. Party hats.</h3>

<p>There is probably a spectrum that runs from Designer to to Database Engineer with developers front-end and back in between. Throw in copywriters, project managers, and account executives, and you have a whole world of hats to wear. You might think some of these roles are boring, and they might say the same of you, but that's not the point - branching into other roles makes one immune to ignorance about them. And, if you're lucky, you'll learn a little about what you really love to do with your career.</p>

<!--more-->


<h3>Front End, Back End.</h3>

<p>If you're used to writing Ruby, PHP, Python, or whatever backend language you're comfortable with, then JavaScript, CSS, and HTML might seem like tricycle languages to you. On the surface, back-end languages deal more closely with data and hardware, and are open to huge levels of nuance and particular histories which developers take with them with every new project. JS isn't all namby-pamby and CSS has its own nuances - and both have communities that are huge and accessible. Getting used to browser compatibility issues will help solve your fellow devs hours of headaches in the future, and getting accustomed to html5 will help relieve your own frustration with web objects.</p>

<p>If you're a front-end guy or gal, learn what you can about the server-side - talk to back-end developers and start going to hack nights. If you have a high familiarity with JavaScript, use Node.js to catapult you into the world of server-side scripting. It's probably a matter of time before these two disciplines are looked at in the same way, after all.</p>

<h3>This doesn't mean you have to wear a Beret.</h3>

<p>Maybe you're already designing in code. That's great! Keep up the good work. If not, you should know that coding starts at the design level. Most web designs, in Photoshop or otherwise, have a structure inherently established, and proper use of layering and folder-structures within a document only help add to this structure.</p>

<p>Talk to your designers and see how they setup their grids, their layer/folder structure, and their element hierarchy. It could give you a great head-start when building out your web templates or reveal the designer's intentions before you get too far down your path in coding the site.</p>

<h3>Lose the Lorem Ipsum</h3>

<p>Ditch it. If you're building out a website with greeked text, take the time to write some sample content for the page you're building. It will help give you an idea of what the user will experience when he/she hits your page after you launch. At this level, you'll often realize that a page is unnecessary because the content is redundant - just because the site map specifies it should exist doesn't give it validity. Tap into your inner Copywriter and give it a go!</p>

<h3>Your Sunday Best</h3>

<p>Some of the best devs I know are serious introverts. There's no fault in this: they put on their headphones and crank out better code than I could muster. But there's a reason for the extroversion that project managers and account executives extoll in their peers - clients love being spoken to in their own language, and they love being able to feel like they can speak to you in yours. If you comment your code (and you do. I know you do.), just expand your comments into notes that a layman could understand. Why you're minimizing a file, the reasons behind g-zipping or calling jQuery rather than writing in core JavaScript, etc. all matter when the client is expected to ever maintain a project, or even to help explain just what they're getting out of the deal. More than anything, working on speaking with clients will help you connect with them on what their needs really are, and quit playing telephone with their IT team or middle managers.</p>

<hr />

<p>There are lots of hats you can wear, either in an ad agency or web firm world. Just because you're comfortable as a developer doesn't mean you shouldn't get uncomfortable from time to time. Take chances and do new things!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Words to Live By]]></title>
    <link href="http://TagSoup.github.com/blog/2012/03/10/words-to-live-by/"/>
    <updated>2012-03-10T22:05:00-07:00</updated>
    <id>http://TagSoup.github.com/blog/2012/03/10/words-to-live-by</id>
    <content type="html"><![CDATA[<h3>Day 16 of the 30 Day Writing Challenge</h3>

<p>This is one of my favorite presentations. GitHub just "gets it". I wish this was a prerequisite for anyone wanting to start their own business.</p>

<script src="http://speakerdeck.com/embed/4ebaea7763912f032300cbe8.js"></script>




<div class="clearfix">
    <img class="left" src="/images/itsatrap.jpg" width="50">
    <img class="left" src="/images/itsatrap.jpg" width="50">
    <img class="left" src="/images/itsatrap.jpg" width="50">
    <img class="left" src="/images/itsatrap.jpg" width="50">
    <img class="left" src="/images/itsatrap.jpg" width="50">
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I see you getUserMedia]]></title>
    <link href="http://TagSoup.github.com/blog/2012/03/09/i-see-you-getusermedia/"/>
    <updated>2012-03-09T22:43:00-07:00</updated>
    <id>http://TagSoup.github.com/blog/2012/03/09/i-see-you-getusermedia</id>
    <content type="html"><![CDATA[<h3>Day 15 of the 30 Day Writing Challenge. Halfway there!</h3>

<p>I'm busting my ass to get this post in. I hate just throwing "anything" up, so I took some time to research something I've never messed with: getUserMedia.</p>

<p>Let me preface this by giving you some requirements. Your computer needs a camera on it. You also need <a href="http://tools.google.com/dlpage/chromesxs">Chrome Canary</a>, or <a href="http://www.opera.com/browser/next/">Opera Next</a>. If you chose to use Opera Next, you don't have to enable any extra settings. If you decided to get Chrome Canary, you will have to enable one option. To do so, go to <a href="chrome://flags/">chrome://flags/</a> and look for "Enable MediaStream". Make sure this is enabled. Now time for the fun.</p>

<p><video id="video" width="640" height="480" autoplay></video>
<button id="take">Take Picture</button>

<!-- NEEDS THE DAMN WIDTH AND HEIGHT SET ON THE ELEMENT -->
<canvas id="snapshot" width="640" height="480"></canvas>


<script type="text/javascript">

	var doc = document,
		snapshot = doc.getElementById('snapshot'),
		photo = snapshot.getContext('2d'),
		video = doc.querySelector('video'),
		VIDEO_WIDTH, VIDEO_HEIGHT,
		computeSize = function(supportsObjectFit){
		// user agents that don't support object-fit 
		// will display the video with a different 
		// aspect ratio. 
			if (supportsObjectFit === true){
				VIDEO_WIDTH = 640;
				VIDEO_HEIGHT = 480;
			} else {
				VIDEO_WIDTH = video.videoWidth;
				VIDEO_HEIGHT = video.videoHeight;
			}
		},
		successCallback = function (stream) {
			video.src = stream;
			video.play();
			computeSize(true);
		},
		errorCallback =function (error) {
			console.error('An error occurred: [CODE ' + error.code + ']');
		};

	doc.getElementById('take').onclick = function() {
		computeSize(true);
		photo.drawImage(video, 0, 0, VIDEO_WIDTH, VIDEO_HEIGHT);
	};

	window.addEventListener('DOMContentLoaded', function() {

		if (navigator.getUserMedia) {

			navigator.getUserMedia({'video': true}, successCallback, errorCallback);

		} else if (navigator.webkitGetUserMedia) {
			
			navigator.webkitGetUserMedia("video", function(stream){
				video.src = window.webkitURL.createObjectURL(stream);
				video.play();
				computeSize(false);
			});

		} else {
			console.log('Native web camera streaming (getUserMedia) is not supported in this browser.');
		}

	}, false);
</script></p>

<!-- more -->


<p>If you have met all the requirements, you should see a live stream of your camera in the video player. Pretty fun right? And below the video stream, there's a "Take Picture" button. Click it! Makes sexy happen! Before we dive in and see how it was done, let me say there is a ton of good info on this out there on the webs. I was inspired by Rick Waldron, Mike Taylor and others when I started messing with this. I saw some shit Rick was posting on <a href="http://bocoup.com/">Bocoup's site</a> and it blew me away. Also, <a href="http://miketaylr.com/photobooth/">Mike Taylor's photo booth</a> is ridic. There's no way I could have gotten any of this done if I didn't take a peek at what they were doing. Now, let's check out some code.</p>

<p><div><script src='https://gist.github.com/2010552.js?file='></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=0.5&quot;&gt;
	&lt;title&gt;Oh hai.&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;video id=&quot;video&quot; width=&quot;640&quot; height=&quot;480&quot; autoplay&gt;
	  &lt;!-- Here you can set some default video up if the camera API no worky --&gt;
      &lt;source src=&quot;default.webm&quot; type=&quot;video/webm;&quot; codecs=&quot;vp8, vorbis&quot;&gt;
      &lt;source src=&quot;default.mp4&quot; type=&quot;video/mp4;&quot; codecs=&quot;avc1.42E01E, mp4a.40.2&quot;&gt;
&lt;/video&gt;
&lt;button id=&quot;take&quot;&gt;Take Picture&lt;/button&gt;

&lt;!-- NEEDS THE DAMN WIDTH AND HEIGHT SET ON THE ELEMENT IF YOU NO HAS, PICTURE LUK FUNY--&gt;
&lt;!-- SCALES IMPROPERLY WITHOUT WIDTH AND HEIGHT ON ELEMENT. CSS NO HELPY --&gt;
&lt;canvas id=&quot;snapshot&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/canvas&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>
</p>

<p>Simple right? We just need an html5 video element, a button, and a canvas element. You can see in my comment, that you are able to drop in a default video incase the getUserMedia isn't available on the user's browser. In Mike Taylor's photobooth, if you don't have the getMediaUser method available, you can still "photobooth" a clip from a tasty Cary Grant video.</p>

<p>On to the guts, the JS, the fun part. I do have to let you in on a secet... I was rushed to get this out before midnight so it might be a tad sloppy. Deal with it!</p>

<p><div><script src='https://gist.github.com/2010556.js?file='></script>
<noscript><pre><code>	var doc = document,
		snapshot = doc.getElementById('snapshot'),
		photo = snapshot.getContext('2d'),
		video = doc.querySelector('video'),
		VIDEO_WIDTH, VIDEO_HEIGHT,
		computeSize = function(supportsObjectFit){
		// user agents that don't support object-fit 
		// will display the video with a different 
		// aspect ratio. 
			if (supportsObjectFit === true){
				VIDEO_WIDTH = 640;
				VIDEO_HEIGHT = 480;
			} else {
				VIDEO_WIDTH = video.videoWidth;
				VIDEO_HEIGHT = video.videoHeight;
			}
		},
		successCallback = function (stream) {
			video.src = stream;
			video.play();
			computeSize(true);
		},
		errorCallback =function (error) {
			console.error('An error occurred: [CODE ' + error.code + ']');
			computeSize(true);
		};

	doc.getElementById('take').onclick = function() {
		computeSize(true);
		photo.drawImage(video, 0, 0, VIDEO_WIDTH, VIDEO_HEIGHT);
	};

	window.addEventListener('DOMContentLoaded', function() {

		if (navigator.getUserMedia) {

			navigator.getUserMedia({'video': true}, successCallback, errorCallback);

		} else if (navigator.webkitGetUserMedia) {
			
			navigator.webkitGetUserMedia(&quot;video&quot;, function(stream){
				video.src = window.webkitURL.createObjectURL(stream);
				video.play();
				computeSize(false);
			});

		} else {
			console.log('Native web camera streaming (getUserMedia) is not supported in this browser.');
		}

	}, false);</code></pre></noscript></div>
</p>

<p>I set up a lazy reference to document, fat finger, no make typey good. I give myself a shortcut. Next I just set up some variables. <code>snapshot</code> is my canvas element. This is where the photo we take will be placed. Now let's give the canvas some methods to use <code>.getContext()</code>. This comes in handy when we need to use the <code>.drawImage()</code> method. Next I set up a variable for the video element. And finally some functions. I will touch briefly on these.</p>

<p>```javascript
computeSize = function(supportsObjectFit){</p>

<pre><code>    // user agents that don't support object-fit 
    // will display the video with a different 
    // aspect ratio. 
        if (supportsObjectFit == true){
            VIDEO_WIDTH = 640;
            VIDEO_HEIGHT = 480;
        } else {
            VIDEO_WIDTH = video.videoWidth;
            VIDEO_HEIGHT = video.videoHeight;
        }
    }
</code></pre>

<p><code>``
I know I'm calling this a bit wrong later in the code, but that's ok. This isn't production ready, for a client, or well groomed yet. It's a rough demo. But, let's break down the function. We are passing one argument, supportObjectFit. This comes from an Opera Specific CSS property called</code>object-fit`. It has to do with setting proper ratios of placed elements (video, canvas etc). <a href="http://dev.opera.com/articles/view/css3-object-fit-object-position/">Read more about it here</a>.</p>

<p>Next we have out success and fail callbacks for later:</p>

<p>```javascript
successCallback = function (stream) {</p>

<pre><code>video.src = stream;
video.play();
computeSize(true);
</code></pre>

<p>},
errorCallback =function (error) {</p>

<pre><code>console.error('An error occurred: [CODE ' + error.code + ']');
computeSize(true);
</code></pre>

<p>}
```
These come into play a bit later when we're doing our feature detection on the getUserMedia method. On success, we're setting the src of our video element to be the "feed" from our device's video camera. We're also determining the size of the video element if the user is browsing with the Opera Next browser.</p>

<p>```javascript
doc.getElementById('take').onclick = function() {</p>

<pre><code>computeSize(true);
photo.drawImage(video, 0, 0, VIDEO_WIDTH, VIDEO_HEIGHT);
</code></pre>

<p>};
```</p>

<p>Easy Peasy. Set up an click event on the "Take Picture" button. It will run the conputeSize() function, and then draw our screen shot from the video (aka our camera feed) onto our canvas element.</p>

<p>Now here comes the important part, everything else was basically for setting this up:</p>

<p>```javascript
window.addEventListener('DOMContentLoaded', function() {</p>

<pre><code>if (navigator.getUserMedia) {

    navigator.getUserMedia({'video': true}, successCallback, errorCallback);

} else if (navigator.webkitGetUserMedia) {

    navigator.webkitGetUserMedia("video", function(stream){
        video.src = window.webkitURL.createObjectURL(stream);
        video.play();
        computeSize(false);
    });

} else {
    console.log('Native web camera streaming (getUserMedia) is not supported in this browser.');
}
</code></pre>

<p>}, false);
<code>``
Here's where feature detection comes in to play. When the document is loaded, let's check to see if the browser supports our getUserMedia hawtness (currently, meaning the browser is Opera). If that is truthy, let's use it. In our example, we're just grabbing video by passing in the</code>{'video': true}` arguement, but you could also pass it audio as well. We also pass in 2 callbacks as arguements. The success and error functions we covered earlier. DONE!</p>

<p>Now we check to see if the user is browsing with the Chrome Canary build. The syntax changes a tiny bit but the idea is the same. Set the video element's source to be our camer feed, start the camera and all the computeSize() function. Since we know the user isn't in Opera Live here, we pass the argument "false".</p>

<p>If all else fails, log a msg showing this shit ain't gonna work.</p>

<p>I look forward to messing with this some more. I want to save the images users take and give them the ability to upload them to the TagSoup page. I will be working on that next. Please check out the links from Mike Taylor, Rick Waldron, Opera, and Google Devs.</p>

<p>11:56... Just made it.</p>
]]></content>
  </entry>
  
</feed>
